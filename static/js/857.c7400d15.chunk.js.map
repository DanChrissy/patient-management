{"version":3,"file":"static/js/857.c7400d15.chunk.js","mappings":"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","sources":["components/Button/index.tsx","components/Collapsible/index.tsx","../node_modules/@material-ui/icons/esm/Check.js","components/Checkbox/index.tsx","pages/Doctor/index.tsx"],"sourcesContent":["import { FunctionComponent, CSSProperties } from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\ninterface ButtonStyled { \r\n    outline?: boolean,\r\n    primary?: boolean\r\n}\r\ninterface ButtonProps extends ButtonStyled {\r\n    title?: string,\r\n    disabled?: boolean,\r\n    customStyles?: CSSProperties\r\n    onClick?: () => any\r\n}\r\n\r\nconst Button : FunctionComponent <ButtonProps> = ({ title, disabled, customStyles, onClick, ...props}) => {\r\n    return (\r\n        <ButtonContainer\r\n            type='button'\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n            style={customStyles}\r\n            {...props}\r\n        >\r\n            {title}\r\n        </ButtonContainer>\r\n    )\r\n}\r\n\r\nexport default Button;\r\n\r\nconst ButtonContainer = styled.button<ButtonStyled>`\r\n    outline: none;\r\n    border: none;\r\n\r\n    width: auto;\r\n    padding: var(--space-12) var(--space-14);\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    font-family: 'DM Sans';\r\n    font-size: var(--font-14);\r\n    font-weight: normal;\r\n    font-size: normal;\r\n\r\n    color: var(--color-white);\r\n    background-color: var(--color-purple-800);\r\n    border-radius: 0.25rem;\r\n\r\n   cursor: pointer;\r\n\r\n   :disabled {\r\n       cursor: default;\r\n   }\r\n\r\n\r\n`;","import { CSSProperties, FunctionComponent, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nimport { ExpandLess, ExpandMore } from '@material-ui/icons';\r\n\r\ntype Props = {\r\n    title: string,\r\n    customTitleStyles?: CSSProperties,\r\n    customContentStyles?: CSSProperties,\r\n}\r\nconst Collapsible : FunctionComponent <Props> = ({ title, customTitleStyles, customContentStyles, children }) => {\r\n    const [isOpen, setIsOpen] = useState<boolean>(false);\r\n\r\n    function handleToggleCollapsible() {\r\n        setIsOpen(!isOpen);\r\n    }\r\n    return (\r\n        <CollapsibleContainer>\r\n            <CollapsibleTitleContainer isOpen={isOpen} style={customTitleStyles}>\r\n                <span>{title}</span>\r\n                {isOpen ?\r\n                    <ExpandLess className='collapsible-icon' onClick={handleToggleCollapsible}/> :\r\n                    <ExpandMore className='collapsible-icon' onClick={handleToggleCollapsible}/>\r\n                }\r\n            </CollapsibleTitleContainer>\r\n            {isOpen &&\r\n                <CollapsibleContent style={customContentStyles}>\r\n                    {children}\r\n                </CollapsibleContent>\r\n            }\r\n        </CollapsibleContainer>\r\n    )\r\n}\r\n\r\nexport default Collapsible;\r\n\r\nconst CollapsibleContainer = styled.div`\r\n    width: auto;\r\n    min-width: 5rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst CollapsibleTitleContainer = styled.div<{isOpen: boolean}>`\r\n    width: auto;\r\n    height: 3rem;\r\n    padding: var(--space-12) var(--space-14);\r\n\r\n    background-color: var(--color-white);\r\n\r\n    border: 1px solid var(--color-gray-800);\r\n    border-radius: 0.25rem;\r\n    box-sizing: border-box;\r\n\r\n    ${props => props.isOpen && css`\r\n        border-bottom: 0;\r\n        border-bottom-left-radius: 0;\r\n        border-bottom-right-radius: 0;\r\n    `}\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    font-family: Inter;\r\n    font-size: var(--font-16);\r\n    line-height: 1rem;\r\n    font-weight: 500;\r\n    font-style: normal;\r\n    color: var(--color-gray-800);\r\n\r\n    .collapsible-icon {\r\n        cursor: pointer;\r\n    }\r\n\r\n`;\r\n\r\nconst CollapsibleContent = styled.div`\r\n    width: auto;\r\n    /* margin-top: var(--space-8); */\r\n    /* padding-bottom: var(--space-20); */\r\n\r\n    background: var(--color-white);\r\n\r\n    border: 1px solid var(--color-gray-800);\r\n    border-top: 0;\r\n\r\n    border-bottom-left-radius: 0.5rem;\r\n    border-bottom-right-radius: 0.5rem;\r\n`;\r\n","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"\n}), 'Check');","import { CSSProperties, FunctionComponent } from 'react';\r\nimport styled, {css} from 'styled-components';\r\n\r\nimport { Check } from '@material-ui/icons';\r\n\r\ntype Props = {\r\n    selected?: boolean,\r\n    onClick?: () => any,\r\n    customStyles?: CSSProperties,\r\n}\r\nconst Checkbox : FunctionComponent<Props> = ({ selected = false, customStyles, onClick }) => {\r\n    return (\r\n        <CheckboxContainer style={customStyles} selected={selected} onClick={onClick}>\r\n            {selected && <Check className=\"checkbox-icon\"/>}\r\n        </CheckboxContainer>\r\n    )\r\n};\r\n\r\nexport default Checkbox;\r\n\r\nconst CheckboxContainer = styled.div<{selected?: boolean}>`\r\n    height: 1rem;\r\n    width: 1rem;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    border: 1px solid var(--color-gray-600);\r\n    border-radius: 0.25rem;\r\n    background-color: var(--color-white);\r\n\r\n    cursor: pointer;\r\n\r\n    ${props => props.selected && css`\r\n        border-color: transparent;\r\n        background-color: var(--color-purple-800);\r\n    `}\r\n\r\n    .checkbox-icon {\r\n        height: 0.875rem;\r\n        width: 0.875rem;\r\n\r\n        color: var(--color-white);\r\n    }\r\n`;","import { CSSProperties, FunctionComponent, useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Parse from 'parse';\r\nimport Checkbox from '../../components/Checkbox';\r\nimport Collapsible from '../../components/Collapsible';\r\n\r\nimport data from '../../assets/data.json';\r\nimport { format } from 'date-fns';\r\nimport { groupBy } from 'lodash';\r\nimport Button from '../../components/Button';\r\nimport { useSelector } from 'react-redux';\r\nimport { getUser } from '../../store/authReducer';\r\n\r\ninterface DoctorAppObj {\r\n    id: string,\r\n    date: string | Date,\r\n    patient: string,\r\n    status?: string\r\n}\r\n\r\ninterface GroupedAppObj {\r\n    groupedMonth: string,\r\n    groupAppointments: DoctorAppObj[],\r\n}\r\n\r\nconst Doctor : FunctionComponent = () => {\r\n    const user = useSelector(getUser);\r\n    const [appointmentsToApprove, setAppointmentsToApprove] = useState<GroupedAppObj[]>([]);\r\n\r\n    const [selectedAppointments, setSelectedAppointments] = useState<string[]>([]);\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        getAllDoctorAppointments();\r\n    }, []);\r\n\r\n    async function getPatientDetails(res: Parse.Object[]) {\r\n        const queryUsers: Parse.Query = new Parse.Query('_User');\r\n\r\n        const promisArr = res.map(async item => {\r\n            const patient = await queryUsers.get(item.get('patient').id);\r\n            const updatedResult = {\r\n                id: item.id,\r\n                date: item.get('date'),\r\n                patient: `${patient.get('firstName')} ${patient.get('lastName')}`,\r\n            };\r\n            return updatedResult;\r\n        });\r\n        Promise.all(promisArr)\r\n            .then(promiseRes => {\r\n                handleConfigureData(promiseRes);\r\n            }) \r\n            .catch(err => {\r\n                handleConfigureData([]);\r\n            })\r\n            .finally(() => setIsLoading(false))\r\n    }\r\n\r\n    async function getAllDoctorAppointments() {\r\n        setIsLoading(true);\r\n        setSelectedAppointments([]);\r\n        const queryAppoitments: Parse.Query = new Parse.Query('Appointment');\r\n        const queryUsers: Parse.Query = new Parse.Query('_User');\r\n\r\n        try {\r\n            const doctor = await queryUsers.get(user.id);\r\n            queryAppoitments.equalTo('doctor', doctor);\r\n            queryAppoitments.equalTo('status', 'pending');\r\n\r\n            try {\r\n                const appRes = await queryAppoitments.find();\r\n                getPatientDetails(appRes);\r\n                // handleConfigureData(appRes);\r\n\r\n            } catch (err) {\r\n                setIsLoading(false);\r\n            }\r\n        } catch (err) {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    function handleConfigureData(result: DoctorAppObj[]) {\r\n        if (result.length > 0) {\r\n            const grouped = groupBy(result, ((app: { date: Date }) => format(new Date(app.date), 'MMMM')));\r\n            const groupedSectionArr : any = Object.keys(grouped).map((key: string) => ({\r\n                groupedMonth: key,\r\n                groupAppointments: grouped[key]\r\n            }));\r\n            setAppointmentsToApprove(groupedSectionArr);\r\n        } else {\r\n            setAppointmentsToApprove([]);\r\n        }\r\n    }\r\n\r\n    function handleSelecteAppointment(appointmentId: string) {\r\n        let updatedApps = selectedAppointments;\r\n        if (selectedAppointments.includes(appointmentId)) {\r\n            updatedApps = updatedApps.filter(item => item !== appointmentId);\r\n        } else {\r\n            updatedApps = [...updatedApps, appointmentId];\r\n        }\r\n\r\n        setSelectedAppointments(updatedApps);\r\n    }\r\n\r\n    async function handleUpdateAppointmentStatus(type: string) {\r\n        console.log('Selected appointments:', selectedAppointments);\r\n\r\n        const promiseArr = selectedAppointments.map(async item => {\r\n            const query: Parse.Query = new Parse.Query('Appointment');\r\n            const object: Parse.Object = await query.get(item);\r\n            object.set('status', type);\r\n            object.save();\r\n        });\r\n\r\n        Promise.all(promiseArr)\r\n            .then(res => {\r\n                alert('Appointments status updated:');\r\n                getAllDoctorAppointments();\r\n            })\r\n            .catch(err => {\r\n                alert('Unable to update status');\r\n                console.log('Appointments could not be updatesd');\r\n            })\r\n        \r\n    }\r\n\r\n    return (\r\n        <DoctorWrapper>\r\n            <DoctorContainer>\r\n\r\n                <AppointmentSections>\r\n                    <p className='section-title'>Pending Appointments</p>\r\n                    { !isLoading && <AppointmentSectionCollapsible>\r\n                        {appointmentsToApprove.map((group: GroupedAppObj, index: number) => (\r\n                            <div key={`pending-group-${index}`} className=\"grouped-app\">\r\n                                <Collapsible\r\n                                    title={group.groupedMonth}\r\n                                    customTitleStyles={collapsibleTitle}\r\n                                    customContentStyles={collapsibleContent}\r\n                                >\r\n                                    { (group.groupAppointments).map((appointment: any, index: number) => (\r\n                                        <div className='checked-item' key={`pending-appointments-${index}`}>\r\n                                            <Checkbox\r\n                                                selected={selectedAppointments.includes(appointment.id)}\r\n                                                onClick={() => handleSelecteAppointment(appointment.id)}\r\n                                            />\r\n                                            <span className='checked-item-text'>{appointment.patient} - {format(new Date(appointment.date), 'MMMM d, yyyy')}</span>\r\n                                        </div>\r\n                                    ))}\r\n                                </Collapsible>\r\n                            </div>\r\n                        ))}\r\n                        \r\n                    </AppointmentSectionCollapsible> }\r\n                </AppointmentSections>\r\n                \r\n                {appointmentsToApprove.length > 0 &&\r\n                    <StatusButtons>\r\n                        <Button\r\n                            title='Approve Appointments'\r\n                            onClick={() => handleUpdateAppointmentStatus('approved')}\r\n                        />\r\n\r\n                        <Button\r\n                            title='Reject Appointments'\r\n                            onClick={() => handleUpdateAppointmentStatus('rejected')}\r\n                        />\r\n                    </StatusButtons>\r\n                }\r\n               \r\n            </DoctorContainer>\r\n        </DoctorWrapper>\r\n    );\r\n}\r\n\r\nexport default Doctor;\r\n\r\nconst collapsibleTitle : CSSProperties = {\r\n    border: 'none',\r\n    width: '16rem',\r\n    borderBottom: '1px solid var(--color-purple-700)',\r\n    borderRadius: 0\r\n};\r\n\r\nconst collapsibleContent : CSSProperties = {\r\n    border: 'none',\r\n    width: 'max-content',\r\n    marginLeft: 'var(--space-16)',\r\n    marginTop: 'var(--space-10)'\r\n}\r\n\r\nconst DoctorWrapper = styled.div`\r\n    height: 100vh;\r\n    width: 100vw;\r\n\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nconst DoctorContainer = styled.div`\r\n    width: calc(100% - var(--space-48));\r\n    height: calc(100% - var(--space-48));\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    padding: var(--space-24);\r\n\r\n`;\r\n\r\nconst AppointmentSections = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n\r\n    .section-title {\r\n        margin-bottom: var(--space-48);\r\n        font-family: 'DM Sans';\r\n        font-size: var(--font-24);\r\n        font-weight: 500;\r\n        font-style: normal;\r\n        color: var(--color-gray-800);\r\n        text-align: center;\r\n    }\r\n\r\n`;\r\n\r\nconst AppointmentSectionCollapsible = styled.div`\r\n    margin-bottom: var(--space-14);\r\n    :last-of-type{ margin-bottom: 0; }\r\n\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(16rem, 1fr));\r\n    grid-row-gap: var(--space-14);\r\n    grid-column-gap: var(--space-8);\r\n\r\n    .grouped-app {\r\n        /* margin-bottom: var(--space-18);\r\n        :last-of-type{ margin-bottom: 0; } */\r\n    }\r\n\r\n    .checked-item {\r\n        display: flex;\r\n        align-items: center;\r\n\r\n        margin-bottom: var(--space-10);\r\n        :last-of-type { margin-bottom: 0; }\r\n    }\r\n\r\n    .checked-item-text {\r\n        margin-left: var(--space-12);\r\n    }\r\n`;\r\n\r\nconst StatusButtons = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    flex-wrap: wrap;\r\n\r\n    margin-top: var(--space-32);\r\n\r\n    button {\r\n        width: 11.5rem;\r\n        height: 2.75rem;\r\n        :hover {\r\n            background-color: var(--color-white);\r\n            color: var(--color-black);\r\n        }\r\n        :first-of-type {\r\n            margin-right: var(--space-14);\r\n            :hover {\r\n                border: 2px solid var(--color-purple-700);\r\n            }\r\n        }\r\n        :last-of-type {\r\n            background-color: var(--color-red-600);\r\n\r\n            :hover {\r\n                background-color: var(--color-white);\r\n                border: 2px solid var(--color-red-600);\r\n            }\r\n\r\n        }\r\n    }\r\n`;"],"names":["title","disabled","customStyles","onClick","props","ButtonContainer","type","style","styled","customTitleStyles","customContentStyles","children","useState","isOpen","setIsOpen","handleToggleCollapsible","CollapsibleContainer","CollapsibleTitleContainer","className","CollapsibleContent","css","createSvgIcon","React","d","selected","CheckboxContainer","Check","user","useSelector","getUser","appointmentsToApprove","setAppointmentsToApprove","selectedAppointments","setSelectedAppointments","isLoading","setIsLoading","getPatientDetails","res","queryUsers","Parse","promisArr","map","item","get","id","patient","updatedResult","date","Promise","all","then","promiseRes","handleConfigureData","catch","err","finally","getAllDoctorAppointments","queryAppoitments","doctor","equalTo","find","result","length","grouped","groupBy","app","format","Date","groupedSectionArr","Object","keys","key","groupedMonth","groupAppointments","handleUpdateAppointmentStatus","console","log","promiseArr","query","object","set","save","alert","useEffect","DoctorWrapper","DoctorContainer","AppointmentSections","AppointmentSectionCollapsible","group","index","Collapsible","collapsibleTitle","collapsibleContent","appointment","includes","appointmentId","updatedApps","filter","handleSelecteAppointment","StatusButtons","Button","border","width","borderBottom","borderRadius","marginLeft","marginTop"],"sourceRoot":""}