{"version":3,"file":"static/js/937.97fc4fb2.chunk.js","mappings":"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","sources":["components/Button/index.tsx","components/Collapsible/index.tsx","components/Dropdown/MenuItems/index.tsx","components/Dropdown/index.tsx","components/InputField/index.tsx","components/Record/index.tsx","pages/Appointment/AppointmentsList/index.tsx","pages/Appointment/index.tsx"],"sourcesContent":["import { FunctionComponent, CSSProperties } from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\ninterface ButtonStyled { \r\n    outline?: boolean,\r\n    primary?: boolean\r\n}\r\ninterface ButtonProps extends ButtonStyled {\r\n    title?: string,\r\n    disabled?: boolean,\r\n    customStyles?: CSSProperties\r\n    onClick?: () => any\r\n}\r\n\r\nconst Button : FunctionComponent <ButtonProps> = ({ title, disabled, customStyles, onClick, ...props}) => {\r\n    return (\r\n        <ButtonContainer\r\n            type='button'\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n            style={customStyles}\r\n            {...props}\r\n        >\r\n            {title}\r\n        </ButtonContainer>\r\n    )\r\n}\r\n\r\nexport default Button;\r\n\r\nconst ButtonContainer = styled.button<ButtonStyled>`\r\n    outline: none;\r\n    border: none;\r\n\r\n    width: auto;\r\n    padding: var(--space-12) var(--space-14);\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    font-family: 'DM Sans';\r\n    font-size: var(--font-14);\r\n    font-weight: normal;\r\n    font-size: normal;\r\n\r\n    color: var(--color-white);\r\n    background-color: var(--color-purple-800);\r\n    border-radius: 0.25rem;\r\n\r\n   cursor: pointer;\r\n\r\n   :disabled {\r\n       cursor: default;\r\n   }\r\n\r\n\r\n`;","import { CSSProperties, FunctionComponent, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nimport { ExpandLess, ExpandMore } from '@material-ui/icons';\r\n\r\ntype Props = {\r\n    title: string,\r\n    customTitleStyles?: CSSProperties,\r\n    customContentStyles?: CSSProperties,\r\n}\r\nconst Collapsible : FunctionComponent <Props> = ({ title, customTitleStyles, customContentStyles, children }) => {\r\n    const [isOpen, setIsOpen] = useState<boolean>(false);\r\n\r\n    function handleToggleCollapsible() {\r\n        setIsOpen(!isOpen);\r\n    }\r\n    return (\r\n        <CollapsibleContainer>\r\n            <CollapsibleTitleContainer isOpen={isOpen} style={customTitleStyles}>\r\n                <span>{title}</span>\r\n                {isOpen ?\r\n                    <ExpandLess className='collapsible-icon' onClick={handleToggleCollapsible}/> :\r\n                    <ExpandMore className='collapsible-icon' onClick={handleToggleCollapsible}/>\r\n                }\r\n            </CollapsibleTitleContainer>\r\n            {isOpen &&\r\n                <CollapsibleContent style={customContentStyles}>\r\n                    {children}\r\n                </CollapsibleContent>\r\n            }\r\n        </CollapsibleContainer>\r\n    )\r\n}\r\n\r\nexport default Collapsible;\r\n\r\nconst CollapsibleContainer = styled.div`\r\n    width: auto;\r\n    min-width: 5rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst CollapsibleTitleContainer = styled.div<{isOpen: boolean}>`\r\n    width: auto;\r\n    height: 3rem;\r\n    padding: var(--space-12) var(--space-14);\r\n\r\n    background-color: var(--color-white);\r\n\r\n    border: 1px solid var(--color-gray-800);\r\n    border-radius: 0.25rem;\r\n    box-sizing: border-box;\r\n\r\n    ${props => props.isOpen && css`\r\n        border-bottom: 0;\r\n        border-bottom-left-radius: 0;\r\n        border-bottom-right-radius: 0;\r\n    `}\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    font-family: Inter;\r\n    font-size: var(--font-16);\r\n    line-height: 1rem;\r\n    font-weight: 500;\r\n    font-style: normal;\r\n    color: var(--color-gray-800);\r\n\r\n    .collapsible-icon {\r\n        cursor: pointer;\r\n    }\r\n\r\n`;\r\n\r\nconst CollapsibleContent = styled.div`\r\n    width: auto;\r\n    /* margin-top: var(--space-8); */\r\n    /* padding-bottom: var(--space-20); */\r\n\r\n    background: var(--color-white);\r\n\r\n    border: 1px solid var(--color-gray-800);\r\n    border-top: 0;\r\n\r\n    border-bottom-left-radius: 0.5rem;\r\n    border-bottom-right-radius: 0.5rem;\r\n`;\r\n","import { CSSProperties, FunctionComponent } from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\ninterface BaseProps {\r\n    title: string,\r\n    customStyles?: CSSProperties\r\n}\r\n\r\ninterface GroupProps extends BaseProps {\r\n    titleStyles?: CSSProperties,\r\n}\r\n\r\ninterface MenuItemProps extends BaseProps {\r\n    onClick?: () => any,\r\n    disabled?: boolean\r\n}\r\n\r\nexport const GroupMenuItems : FunctionComponent <GroupProps>= ({ title, customStyles, titleStyles, children }) => {\r\n    return (\r\n        <GroupContainer style={customStyles}>\r\n            <p className='group-title' style={titleStyles}>{title}</p>\r\n            {children}\r\n        </GroupContainer>\r\n    )\r\n}\r\n\r\nexport const MenuItem : FunctionComponent <MenuItemProps> = ({ title, customStyles, onClick, disabled = false }) => {\r\n    return (\r\n        <MenuItemContainer disabled={disabled} style={customStyles} onClick={() => (!disabled && onClick) && onClick()}>\r\n            {title}\r\n        </MenuItemContainer>\r\n    )\r\n}\r\n\r\nconst GroupContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    .group-title {\r\n        margin: 0;\r\n\r\n        font-family: 'DM Sans';\r\n        font-size: 0.625rem;\r\n        line-height: 0.625rem;\r\n        font-weight: normal;\r\n        font-style: normal;\r\n\r\n        color: var(--color-gray-100);\r\n\r\n        padding: 0.25rem var(--space-16);\r\n        margin-bottom: var(--space-8);\r\n\r\n        background-color: var(--color-gray-800);\r\n        text-transform: uppercase;\r\n    }\r\n`;\r\n\r\nconst MenuItemContainer = styled.div<{disabled?: boolean}>`\r\n    padding: 0.5rem 0.625rem;\r\n\r\n    display: flex;\r\n    align-items: center;\r\n\r\n\r\n    font-family: Inter;\r\n    font-size: var(--font-14);\r\n    font-weight: normal;\r\n    font-style: normal;\r\n\r\n    color: var(--color-gray-100);\r\n\r\n    ${props => !props.disabled && css`\r\n        :hover {\r\n            background-color: var(--color-gray-800);\r\n            cursor: pointer;\r\n        }\r\n    `}\r\n\r\n\r\n`;","import { CSSProperties, FunctionComponent, ReactNode, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nimport { StyledTypes } from '../InputField';\r\n\r\ntype Props = {\r\n    styledType?: StyledTypes,\r\n    trigger: ReactNode,\r\n    customContainerStyes?: CSSProperties,\r\n    error?:boolean\r\n}\r\n\r\nconst Dropdown : FunctionComponent <Props> = ({ styledType, trigger, error, customContainerStyes, children}) => {\r\n    const [isOpen, setIsOpen] = useState<boolean>(false);\r\n    return (\r\n        <DropdownWrapper>\r\n            <DropdownTrigger styledType={styledType} error={error} onClick={() => setIsOpen(!isOpen)}>\r\n                {trigger}\r\n            </DropdownTrigger>\r\n            {isOpen &&\r\n                <DropdownContainer style={customContainerStyes}>\r\n                    {children}\r\n                </DropdownContainer>\r\n            }\r\n        </DropdownWrapper>\r\n        \r\n    )\r\n}\r\n\r\nexport default Dropdown;\r\n\r\nconst DropdownWrapper = styled.div`\r\n    width: auto;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    position: relative;\r\n\r\n    ::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n\r\n    -ms-overflow-style: none;\r\n    scrollbar-width: none;\r\n`;\r\n\r\nconst DropdownTrigger = styled.div<{styledType?: StyledTypes, error?: boolean}>`\r\n    padding: var(--space-10) var(--space-12);\r\n    background-color: var(--color-white);\r\n    border: 1px solid var(--color-gray-800);\r\n\r\n    font-family: Inter;\r\n    font-size: var(--font-14);\r\n    font-weight: normal;\r\n    font-style: normal;\r\n    color: var(--color-gray-600);\r\n\r\n    border-radius: 0.25rem;\r\n    box-sizing: border-box;\r\n\r\n    ${props => (props.styledType === StyledTypes.LARGE) && css`\r\n        min-width: 25rem;\r\n        min-height: 3rem;\r\n\r\n        font-size: var(--font-16);\r\n        font-weight: 500;\r\n\r\n        border: 2px solid var(--color-gray-600);\r\n\r\n    `}\r\n\r\n    ${props => props.error && css`\r\n        border-color: var(--color-orange-600);\r\n        background-color: var(--color-orange-100);\r\n    `}\r\n\r\n    ${props => (props.error && (props.styledType === StyledTypes.LARGE)) && css`\r\n        border: 2px solid var(--color-red-600);\r\n        background-color: var(--color-white);\r\n        color: var(--color-black);\r\n    `}\r\n`;\r\n\r\nconst DropdownContainer = styled.div`\r\n    width: auto;\r\n    min-width: 14rem;\r\n    /* min-width: max-content; */\r\n\r\n    position: absolute;\r\n    z-index: 2;\r\n    top: 2.5rem;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: 0.125rem;\r\n\r\n    padding: var(--space-8) 0;\r\n    background-color: var(--color-gray-900);\r\n    color: var(--color-white);\r\n\r\n    border-radius: 0.25rem;\r\n`","import { ChangeEvent, FunctionComponent } from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nexport enum StyledTypes {\r\n    LARGE = 'LARGE',\r\n    SMALL = 'SMALL'\r\n}\r\n\r\nexport interface Error {\r\n    hasError: boolean,\r\n    errorMsg?: string\r\n}\r\n\r\nexport interface InputProps {\r\n    styledType?: StyledTypes,\r\n    type?: string,\r\n    value?: string,\r\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => any,\r\n    error?: Error,\r\n    [x: string]: any\r\n}\r\n\r\nconst InputField : FunctionComponent <InputProps> = ({ styledType, type = 'text', value, error={ hasError: false }, onChange, ...props}) => {\r\n    return (\r\n        <InputErrorContainer>\r\n            <Input\r\n                styledType={styledType}\r\n                type={type}\r\n                value={value}\r\n                onChange={onChange}\r\n                error={error.hasError}\r\n                {...props}\r\n            />\r\n            {(error.hasError && error.errorMsg) &&\r\n                <ErrorDisplay styledType={styledType}>{error.errorMsg}</ErrorDisplay>\r\n            }\r\n        </InputErrorContainer>\r\n        \r\n    )\r\n}\r\n\r\nexport default InputField;\r\n\r\nconst InputErrorContainer = styled.div`\r\n    width: auto;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst Input = styled.input<{styledType?: StyledTypes, error?: boolean}>`\r\n    outline: none !important;\r\n\r\n    padding: var(--space-10) var(--space-12);\r\n    background-color: var(--color-white);\r\n    border: 1px solid var(--color-gray-800);\r\n\r\n    font-family: Inter;\r\n    font-size: var(--font-14);\r\n    font-weight: normal;\r\n    font-style: normal;\r\n    color: var(--color-gray-600);\r\n\r\n    border-radius: 0.25rem;\r\n    box-sizing: border-box;\r\n\r\n    ::placeholder {\r\n        color: var(--color-gray-400);\r\n    }\r\n\r\n    :focus {\r\n        border: 1px solid var(--color-purple-800);\r\n\r\n        ${props => (props.styledType === StyledTypes.LARGE) && css`\r\n            border: 2px solid var(--color-purple-800);\r\n        `}\r\n\r\n        ${props => (props.error && (props.styledType === StyledTypes.LARGE)) && css`\r\n            border: 2px solid var(--color-red-600);\r\n        `}\r\n    }\r\n\r\n    ${props => props.error && css`\r\n        border: 1px solid var(--color-orange-600);\r\n        background-color: var(--color-orange-100);\r\n    `}\r\n\r\n    ${props => (props.styledType === StyledTypes.LARGE) && css`\r\n        min-width: 25rem;\r\n        min-height: 3rem;\r\n\r\n        font-size: var(--font-16);\r\n        font-weight: 500;\r\n\r\n        border: 2px solid var(--color-gray-600);\r\n\r\n    `}\r\n\r\n    ${props => (props.error && (props.styledType === StyledTypes.LARGE)) && css`\r\n        border: 2px solid var(--color-red-600);\r\n        background-color: var(--color-white);\r\n        color: var(--color-black);\r\n    `}\r\n\r\n\r\n`;\r\n\r\nconst ErrorDisplay = styled.div<{styledType?: StyledTypes}>`\r\n    margin-top: var(--space-8);\r\n    padding: var(--space-8);\r\n    border-radius: 0.25rem;\r\n\r\n    font-size: var(--font-10);\r\n\r\n    color: var(--color-orange-800);\r\n    background-color: var(--color-red-100);\r\n\r\n    border: 1px solid var(--color-red-800);\r\n\r\n    ${props => (props.styledType === StyledTypes.LARGE) && css`\r\n        font-size: var(--font-12);\r\n    `}\r\n\r\n`;","import { FunctionComponent, CSSProperties } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport InputField, { InputProps } from '../InputField';\r\n\r\ninterface RecordProps extends InputProps {\r\n    title: string,\r\n    customStyleProps?: CSSProperties,\r\n    customField?: any,\r\n}\r\n\r\nconst Record : FunctionComponent <RecordProps> = ({ title, customStyleProps, customField, ...props}) => {\r\n    return (\r\n        <RecordContainer style={customStyleProps}>\r\n            <p>{title}</p>\r\n            {customField ||\r\n                <InputField\r\n                    {...props}\r\n                />\r\n            }\r\n            \r\n        </RecordContainer>\r\n    )\r\n}\r\n\r\nexport default Record;\r\n\r\nconst RecordContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    font-family: Inter;\r\n    font-size: var(--font-14);\r\n    font-weight: normal;\r\n    font-style: normal;\r\n    color: var(--color-gray-600);\r\n\r\n    p { margin: 0; margin-bottom: var(--space-8);}\r\n\r\n`;","import { groupBy } from 'lodash';\r\nimport { FunctionComponent, useEffect, useState } from 'react';\r\nimport Parse from 'parse';\r\nimport styled, { css } from 'styled-components';\r\nimport {format} from 'date-fns';\r\n\r\nimport Collapsible from '../../../components/Collapsible';\r\nimport { appointmentSelectors, setAppointments } from '../../../store/appointmentsReducer';\r\nimport { store } from '../../../store';\r\nimport { useSelector } from 'react-redux';\r\nimport { getUser } from '../../../store/authReducer';\r\n\r\nexport interface AppointmentObj {\r\n    id: string,\r\n    date: string,\r\n    patient: string,\r\n    doctor: string,\r\n    status: string,\r\n}\r\n\r\ninterface AppointmentGroup {\r\n    groupTitle: string,\r\n    groupDates: AppointmentObj[]\r\n}\r\n\r\nconst AppointmentList : FunctionComponent <{reload?: boolean, handleReload: () => void}>= ({ reload, handleReload }) => {\r\n    const user = useSelector(getUser);\r\n    const appointments : any[] = appointmentSelectors.selectAll(store.getState());\r\n    const [patientAppointments, setPatientAppointments] = useState<AppointmentGroup[]>([]);\r\n\r\n    useEffect(() => { getPatientAappointments(); }, []);\r\n\r\n    useEffect(() => {\r\n        if (reload) {\r\n            getPatientAappointments();\r\n        }\r\n    }, [reload]);\r\n\r\n    async function getPatientAappointments() {\r\n        const queryAppoitments: Parse.Query = new Parse.Query('Appointment');\r\n        const queryUsers: Parse.Query = new Parse.Query('_User');\r\n\r\n        try {\r\n            const patient = await queryUsers.get(user.id);\r\n            queryAppoitments.equalTo('patient', patient);\r\n\r\n            try {\r\n                const appRes = await queryAppoitments.find();\r\n                configureAppointments(appRes);\r\n                handleReload();\r\n            } catch (err) {\r\n\r\n            }\r\n        } catch (err) {\r\n\r\n        }\r\n    };\r\n\r\n    function configureAppointments(result: Parse.Object[]) {\r\n        const updatedResults = result.map(item => ({\r\n            date: item.get('date'),\r\n            doctor: `${item.get('doctor').get('firstName')} ${item.get('doctor').get('lastName')}`,\r\n            status: item.get('status'),\r\n        }))\r\n        const groupedAppointments = groupBy(updatedResults, ((app: AppointmentObj) => format(new Date(app.date), 'MMMM')));\r\n        const groupedArr : any = Object.keys(groupedAppointments).map((key: string) => ({\r\n            groupTitle: key,\r\n            groupDates: groupedAppointments[key]\r\n        }))\r\n        setPatientAppointments(groupedArr);\r\n    }\r\n    return (\r\n        <PatientAppointments>\r\n            {\r\n                patientAppointments.map((appGroup: AppointmentGroup, index: number) => (\r\n                    <div key={`collapse-app-${Math.random() + index}`} className=\"collapse-app\">\r\n                        <Collapsible title={appGroup.groupTitle}>\r\n                            <AppointmentContent>\r\n                                {appGroup.groupDates.map((appointment: AppointmentObj, index: number) => {\r\n                                    return (\r\n                                        <p key={`appointment-${Math.random() + index}`} className=\"appointment\">\r\n                                            <span className='bold'>{format(new Date(appointment.date), 'MMM d, yyyy')} @ {format(new Date(appointment.date), 'hh:mm') }</span> appointment by Doctor <span className='bold'>{appointment.doctor}</span> - <span className='bold'>{appointment.status}</span>\r\n                                        </p>\r\n                                    )\r\n                                })}\r\n                            </AppointmentContent>\r\n                        </Collapsible>\r\n                    </div>\r\n                    \r\n                ))\r\n            }\r\n        </PatientAppointments>\r\n        \r\n    )\r\n}\r\n\r\nexport default AppointmentList;\r\n\r\nconst PatientAppointments = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    .collapse-app {\r\n        margin-bottom: var(--space-12);\r\n        :last-of-type { margin-bottom: 0; }\r\n    }\r\n`;\r\n\r\nconst AppointmentContent = styled.div`\r\n    margin: var(--space-12) var(--space-14);\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    .appointment {\r\n        margin: 0;\r\n        font-family: Inter;\r\n        font-size: var(--font-12);\r\n        line-height: var(--font-14);\r\n        font-weight: 400;\r\n        font-style: normal;\r\n        color: var(--color-gray-800);\r\n\r\n        margin-bottom: var(--space-12);\r\n\r\n        ::before {\r\n            content: '+';\r\n            margin-right: var(--space-8);\r\n        }\r\n\r\n        :last-of-type{ margin-bottom: 0; }\r\n    }\r\n\r\n    .bold {\r\n        font-weight: bold;\r\n    }\r\n\r\n`;","import { ChangeEvent, FunctionComponent, useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Parse from 'parse';\r\nimport { ExpandLess, ExpandMore } from '@material-ui/icons';\r\nimport Record from '../../components/Record';\r\nimport { StyledTypes } from '../../components/InputField';\r\nimport AppointmentList, { AppointmentObj } from './AppointmentsList';\r\nimport Dropdown from '../../components/Dropdown';\r\nimport { GroupMenuItems, MenuItem } from '../../components/Dropdown/MenuItems';\r\nimport { format } from 'date-fns';\r\nimport Button from '../../components/Button';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addAppointment } from '../../store/appointmentsReducer';\r\nimport doctors from '../../assets/doctorsData.json';\r\nimport { getUser } from '../../store/authReducer';\r\n\r\nconst Appointment : FunctionComponent = () => {\r\n    const dispatch = useDispatch(); \r\n    const user = useSelector(getUser);\r\n\r\n    const [appointment, setAppointment] = useState<{date: string, doctor: any}>({ date: '', doctor: {}});\r\n    const [errors, setErrors] = useState<string[]>([]);\r\n    const [allDoctors, setAllDoctors] = useState<Parse.Object[]>([]);\r\n\r\n    const [shouldLoad, setShouldLoad] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        async function getAllDoctors() {\r\n            const queryRoles: Parse.Query = new Parse.Query('_Role');\r\n            const queryUsers: Parse.Query = new Parse.Query('_User');\r\n            queryRoles.equalTo('name', 'Doctor');\r\n            try {\r\n                const res = await queryRoles.find();\r\n                const doctorRole = res[0];\r\n                queryUsers.equalTo('role', doctorRole);\r\n\r\n                try {\r\n                    const usersRes = await queryUsers.find();\r\n                    setAllDoctors(usersRes);\r\n\r\n                    console.log('Doctor Users: ', usersRes );\r\n                } catch (err) {\r\n                    console.log('Could not get doctor: ', err);\r\n                }\r\n            } catch (err) {\r\n                alert('Unable to select role.');\r\n            }\r\n        }\r\n        getAllDoctors();\r\n    }, []);\r\n\r\n    function handleSelectDoctor(value: any) {\r\n        setAppointment({\r\n            ...appointment,\r\n            doctor: value\r\n        })\r\n    }\r\n\r\n    function handleSelectDate(e: ChangeEvent<HTMLInputElement>) {\r\n        const { value } = e.currentTarget;\r\n        setAppointment({\r\n            ...appointment,\r\n            date: value\r\n        })\r\n    }\r\n\r\n    function validateSubmission() {\r\n        let valid = true;\r\n        let validateError : string[] = [];\r\n        if (!appointment.date) {\r\n            validateError.push('date');\r\n        }\r\n        if (Object.keys(appointment.doctor).length === 0) {\r\n            validateError.push('doctor');\r\n        }\r\n\r\n        if (validateError.length > 0) valid = false;\r\n        setErrors(validateError);\r\n\r\n        return valid;\r\n    }\r\n\r\n    async function handleSetAppointment() {\r\n        setShouldLoad(false);\r\n        let valid = validateSubmission();\r\n        if (!valid) return;\r\n\r\n        const appointmentObject: Parse.Object = new Parse.Object('Appointment');\r\n        const queryUser: Parse.Query = new Parse.Query('_User');\r\n\r\n        const formattedDate = appointment.date.replace(/-/g, '\\/');\r\n\r\n        const date = new Date(formattedDate);\r\n        const status = 'pending';\r\n        const doctor = appointment.doctor;\r\n\r\n        try {\r\n            const patient = await queryUser.get(user.id);\r\n            appointmentObject.set('date', date);\r\n            appointmentObject.set('doctor', doctor);\r\n            appointmentObject.set('status', status);\r\n            appointmentObject.set('patient', patient);\r\n\r\n            try {\r\n                const result: Parse.Object = await appointmentObject.save();\r\n                setShouldLoad(true);\r\n                setAppointment({ date: '', doctor: ''});\r\n                alert('Appointment sent for approval');\r\n            } catch (error: any) {\r\n                console.error('Error while creating appointment: ', error);\r\n            }\r\n        } catch (err) {\r\n            console.log('Err: ', err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <AppoitnmentWrapper>\r\n            <AppointmentContainer>\r\n                <SetAppointmentContainer>\r\n                    <Record\r\n                        title='Apppointment Date'\r\n                        type=\"date\"\r\n                        styledType={StyledTypes.LARGE}\r\n                        min={format(new Date(), 'yyyy-MM-dd')}\r\n                        onChange={handleSelectDate}\r\n                        error={{\r\n                            hasError: errors.includes('date'),\r\n                            errorMsg: 'Please select a date'\r\n                        }}\r\n                    />\r\n                    <Record\r\n                        title='Doctor'\r\n                        customField={\r\n                            <Dropdown\r\n                                styledType={StyledTypes.LARGE}\r\n                                error={errors.includes('doctor')}\r\n                                trigger={\r\n                                    <div>\r\n                                        {Object.keys(appointment?.doctor).length > 0 ? `${appointment?.doctor.get('firstName')} ${appointment?.doctor.get('lastName')}` : 'No Doctor Selected'}\r\n                                    </div>\r\n                                }\r\n                                customContainerStyes={{\r\n                                    width: '15rem',\r\n                                }}\r\n                            >\r\n                                <GroupMenuItems title='DOCTORS' >\r\n                                    {allDoctors.map((doctor: Parse.Object, index: number) => {\r\n                                        return (\r\n                                            <MenuItem\r\n                                                title={`${doctor.get('firstName')} ${doctor.get('lastName')}`}\r\n                                                onClick={() => handleSelectDoctor(doctor)}\r\n                                            />\r\n                                        )\r\n                                    })}\r\n                                </GroupMenuItems>\r\n                                \r\n                            </Dropdown>\r\n                        }\r\n                    />\r\n                    <div style={{ display: 'flex', alignItems: 'flex-start', marginTop: 'var(--space-24)'}}>\r\n                        <Button\r\n                            title='Set Appointment'\r\n                            customStyles={{\r\n                                height: '2.75rem',\r\n                                width: 'max-content'\r\n                            }}\r\n                            onClick={handleSetAppointment}\r\n                        />\r\n                    </div>\r\n                </SetAppointmentContainer>\r\n                <PreviousAppointments>\r\n                    <p>Patient's Appointments</p>\r\n                    <AppointmentList reload={shouldLoad} handleReload={() => setShouldLoad(false)}/>\r\n                </PreviousAppointments>\r\n            </AppointmentContainer>\r\n        </AppoitnmentWrapper>\r\n    )\r\n}\r\n\r\nexport default Appointment;\r\n\r\nconst AppoitnmentWrapper = styled.div`\r\n    height: 100%;\r\n    width: 100%;\r\n\r\n    margin: 0;\r\n`;\r\n\r\nconst AppointmentContainer = styled.div`\r\n    height: calc(100% - var(--space-48));\r\n    padding: var(--space-24);\r\n    background-color: var(--color-gray-200);\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n`;\r\n\r\nconst SetAppointmentContainer = styled.div`\r\n    /* margin: 0 var(--space-24); */\r\n    display: grid;\r\n    align-content: center;\r\n    justify-content: center;\r\n    grid-template-columns: 26rem max-content auto;\r\n    grid-column-gap: var(--space-14);\r\n`;\r\n\r\nconst PreviousAppointments = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    width: 25rem;\r\n`;"],"names":["title","disabled","customStyles","onClick","props","ButtonContainer","type","style","styled","customTitleStyles","customContentStyles","children","useState","isOpen","setIsOpen","handleToggleCollapsible","CollapsibleContainer","CollapsibleTitleContainer","className","CollapsibleContent","css","GroupMenuItems","titleStyles","GroupContainer","MenuItem","MenuItemContainer","styledType","trigger","error","customContainerStyes","DropdownWrapper","DropdownTrigger","DropdownContainer","StyledTypes","value","hasError","onChange","InputErrorContainer","Input","errorMsg","ErrorDisplay","LARGE","customStyleProps","customField","RecordContainer","reload","handleReload","user","useSelector","getUser","appointmentSelectors","store","patientAppointments","setPatientAppointments","getPatientAappointments","queryAppoitments","Parse","queryUsers","get","id","patient","equalTo","find","configureAppointments","result","updatedResults","map","item","date","doctor","status","groupedAppointments","groupBy","app","format","Date","groupedArr","Object","keys","key","groupTitle","groupDates","useEffect","PatientAppointments","appGroup","index","Collapsible","AppointmentContent","appointment","Math","random","useDispatch","setAppointment","errors","setErrors","allDoctors","setAllDoctors","shouldLoad","setShouldLoad","validateSubmission","valid","validateError","push","length","appointmentObject","queryUser","formattedDate","replace","set","save","alert","console","log","queryRoles","res","doctorRole","usersRes","getAllDoctors","AppoitnmentWrapper","AppointmentContainer","SetAppointmentContainer","Record","min","e","currentTarget","includes","Dropdown","width","display","alignItems","marginTop","Button","height","PreviousAppointments"],"sourceRoot":""}